import numpy as np
import scipy
import matplotlib.pyplot as plt
import warnings
from itertools import islice

def rotate_vectors(vectors, angle, axis):
    """
    Rotate Cartesian vectors with respect to one of the x, y, or z axes.

    Parameters:
    vectors (np.ndarray): Array of shape (N, 3) representing N Cartesian vectors.
    angle (float): Rotation angle in radians.
    axis (str): Axis of rotation ('x', 'y', or 'z').

    Returns:
    np.ndarray: Array of rotated vectors of shape (N, 3).
    """
    if axis == 'x':
        r = scipy.spatial.transform.Rotation.from_euler('x', angle, degrees=False)
    elif axis == 'y':
        r = scipy.spatial.transform.Rotation.from_euler('y', angle, degrees=False)
    elif axis == 'z':
        r = scipy.spatial.transform.Rotation.from_euler('z', angle, degrees=False)
    else:
        raise ValueError("Axis must be 'x', 'y', or 'z'")

    rotated_vectors = r.apply(vectors)
    return rotated_vectors

def points_on_sphere(num_pts=100, figure=False, angles=False):
    #golden spiral method (https://stackoverflow.com/questions/9600801/evenly-distributing-n-points-on-a-sphere)

    import mpl_toolkits.mplot3d

    indices = np.arange(0, num_pts, dtype='float64') + 0.5

    phi = np.arccos(1 - 2*indices/num_pts)
    theta = np.pi * (1 + 5**0.5) * indices

    x, y, z = np.cos(theta) * np.sin(phi), np.sin(theta) * np.sin(phi), np.cos(phi)

    if figure==True:
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(x, y, z)
        plt.show()
    else:
        pass

    if angles == False:
        return x, y, z
    else:
        return phi, theta

def from_car_to_sph(coord):
    #for coord system centered in 0
    coord_conv = np.zeros_like(coord)
    for i in range(len(coord[:,0])):
        coord_conv[i,0] = np.linalg.norm(coord[i,:])
        coord_conv[i,1] = np.arccos(coord[i,2]/coord_conv[i,0])
        coord_conv[i,2] = np.arctan2(coord[i,1],coord[i,0])

    return coord_conv

def from_sph_to_car(coord_sph):
    #for coord system centered in 0
    #angles in radiants
    coord_car = np.zeros_like(coord_sph)
    for i in range(len(coord_car[:,0])):
        coord_car[i,0] = coord_sph[i,0]*np.cos(coord_sph[i,2])*np.sin(coord_sph[i,1])
        coord_car[i,1] = coord_sph[i,0]*np.sin(coord_sph[i,2])*np.sin(coord_sph[i,1])
        coord_car[i,2] = coord_sph[i,0]*np.cos(coord_sph[i,1])

    return coord_car

def terms_labels(conf):
    #from Boca, "theoretical foundations of molecular magnetism" (Ch 8, p 381, Tab 8.4)
    #or OctoYot f_e_data.f90, TS_d_labels (following the order of Nielson e Koster)

    if conf[0]=='d' and int(conf[1:])>5:
        conf = 'd'+str(almost_closed_shells(conf))
    elif conf[0]=='f' and int(conf[1:])>7:
        conf = 'f'+str(almost_closed_shells(conf))
    else:
        pass

    legenda={'d1': ['2D'],
             'd2': ['3P','3F','1S','1D','1G'],
             'd3': ['4P','4F','2P','2D1','2D2','2F','2G','2H'],
             'd4': ['5D','3P1','3P2','3D','3F1','3F2','3G','3H','1S1','1S2','1D1','1D2','1F','1G1','1G2','1I'],
             'd5': ['6S','4P','4D','4F','4G','2S','2P','2D1','2D2','2D3','2F1','2F2','2G1','2G2','2H','2I'],
             'f1':['2F'],
             'f2':['3P','3F','3H','1S','1D','1G','1I'],
             'f3':['4S','4D','4F','4G','4I','2P','2D1','2D2','2F1','2F2','2G1','2G2','2H1','2H2','2I','2K','2L'],
             'f4':['5S','5D','5F','5G','5I','3P1','3P2','3P3','3D1','3D2','3F1','3F2','3F3','3F4','3G1','3G2','3G3','3H1','3H2','3H3','3H4','3I1','3I2','3K1','3K2','3L','3M','1S1','1S2','1D1','1D2','1D3','1D4','1F','1G1','1G2','1G3','1G4','1H1','1H2','1I1','1I2','1I3','1K','1L1','1L2','1N'],
             'f5':['6P','6F','6H','4S','4P1','4P2','4D1','4D2','4D3','4F1','4F2','4F3','4F4','4G1','4G2','4G3','4G4','4H1','4H2','4H3','4I1','4I2','4I3','4K1','4K2','4L','4M','2P1','2P2','2P3','2P4','2D1','2D2','2D3','2D4','2D5','2F1','2F2','2F3','2F4','2F5','2F6','2F7','2G1','2G2','2G3','2G4','2G5','2G6','2H1','2H2','2H3','2H4','2H5','2H6','2H7','2I1','2I2','2I3','2I4','2I5','2K1','2K2','2K3','2K4','2K5','2L1','2L2','2L3','2M1','2M2','2N','2O'],
             'f6':['7F','5S','5P','5D1','5D2','5D3','5F1','5F2','5G1','5G2','5G3','5H1','5H2','5I1','5I2','5K', '5L','3P1','3P2','3P3','3P4','3P5','3P6','3D1','3D2','3D3','3D4','3D5','3F1','3F2','3F3','3F4','3F5','3F6','3F7','3F8','3F9','3G1','3G2','3G3','3G4','3G5','3G6','3G7','3H1','3H2','3H3','3H4','3H5','3H6','3H7','3H8','3H9','3I1','3I2','3I3','3I4','3I5','3I6','3K1','3K2','3K3','3K4','3K5','3K6','3L1','3L2','3L3','3M1','3M2','3M3','3N','3O','1S1','1S2','1S3','1S4','1P','1D1','1D2','1D3','1D4','1D5','1D6','1F1','1F2','1F3','1F4','1G1','1G2','1G3','1G4','1G5','1G6','1G7','1G8','1H1','1H2','1H3','1H4','1I1','1I2','1I3','1I4','1I5','1I6','1I7','1K1','1K2','1K3','1L1','1L2','1L3','1L4','1M1','1M2','1N1','1N2','1Q'],
             'f7':['8S','6P','6D','6F','6G','6H','6I','4S1','4S2','4P1','4P2','4D1','4D2','4D3','4D4','4D5','4D6','4F1','4F2','4F3','4F4','4F5','4G1','4G2','4G3','4G4','4G5','4G6','4G7','4H1','4H2', '4H3','4H4','4H5','4I1','4I2','4I3','4I4','4I5','4K1','4K2','4K3','4L1','4L2','4L3','4M','4N','2S1','2S2','2P1','2P2','2P3','2P4','2P5','2D1','2D2','2D3','2D4','2D5','2D6','2D7','2F1','2F2','2F3','2F4','2F5','2F6','2F7','2F8','2F9','2F0','2G1','2G2','2G3','2G4','2G5','2G6','2G7','2G8','2G9','2G0','2H1','2H2','2H3','2H4','2H5','2H6','2H7','2H8','2H9','2I1','2I2','2I3','2I4','2I5','2I6','2I7','2I8','2I9','2K1','2K2','2K3','2K4','2K5','2K6','2K7','2L1','2L2','2L3','2L4','2L5','2M1','2M2','2M3','2M4','2N1','2N2','2O','2Q']}

    return legenda[conf]

def terms_basis(conf):
    #(2S, L, seniority) da OctoYot f_e_data.f90, TS_d_basis (order from Nielson e Koster)
    if conf[0]=='d' and int(conf[1:])>5:
        conf = 'd'+str(almost_closed_shells(conf))
    elif conf[0]=='f' and int(conf[1:])>7:
        conf = 'f'+str(almost_closed_shells(conf))
    else:
        pass

    legenda={'d1': [[1, 2, 1]],
             'd2': [[2, 1, 2],  [2, 3, 2],  [0, 0, 2],  [0, 2, 2],  [0, 4, 2]],
             'd3': [[3, 1, 3],  [3, 3, 3],  [1, 1, 3],  [1, 2, 1],  [1, 2, 3],  [1, 3, 3],  [1, 4, 3],  [1, 5, 3]],
             'd4': [[4, 2, 4],  [2, 1, 2],  [2, 1, 4],  [2, 2, 4],  [2, 3, 2],  [2, 3, 4],  [2, 4, 4],  [2, 5, 4], [0, 0, 0],  [0, 0, 4],  [0, 2, 2],  [0, 2, 4],  [0, 3, 4],  [0, 4, 2],  [0, 4, 4],  [0, 6, 4]],
             'd5': [[5, 0, 5],  [3, 1, 3],  [3, 2, 5],  [3, 3, 3],  [3, 4, 5],  [1, 0, 5],  [1, 1, 3],  [1, 2, 1], [1, 2, 3],  [1, 2, 5],  [1, 3, 3],  [1, 3, 5],  [1, 4, 3],  [1, 4, 5],  [1, 5, 3],  [1, 6, 5]],
             'f1':[[1, 3, 1]],
             'f2':[[2, 1, 2],  [2, 3, 2],  [2, 5, 2],  [0, 0, 0],  [0, 2, 2],  [0, 4, 2],  [0, 6, 2]],
             'f3':[[3, 0, 3],  [3, 2, 3],  [3, 3, 3],  [3, 4, 3],  [3, 6, 3],  [1, 1, 3],  [1, 2, 3],  [1, 2, 3],  [1, 3, 1],  [1, 3, 3],  [1, 4, 3],  [1, 4, 3],  [1, 5, 3],  [1, 5, 3],  [1, 6, 3],  [1, 7, 3],  [1, 8, 3]],
             'f4':[[4, 0, 4],  [4, 2, 4],  [4, 3, 4],  [4, 4, 4],  [4, 6, 4],  [2, 1, 2],  [2, 1, 4],  [2, 1, 4],  [2, 2, 4],  [2, 2, 4],  [2, 3, 2],  [2, 3, 4],  [2, 3, 4],  [2, 3, 4],  [2, 4, 4],  [2, 4, 4],  [2, 4, 4],  [2, 5, 2],  [2, 5, 4],  [2, 5, 4],  [2, 5, 4],  [2, 6, 4],  [2, 6, 4],  [2, 7, 4],  [2, 7, 4],  [2, 8, 4],  [2, 9, 4],  [0, 0, 0],  [0, 0, 4],  [0, 2, 2],  [0, 2, 4],  [0, 2, 4],  [0, 2, 4],  [0, 3, 4],  [0, 4, 2],  [0, 4, 4],  [0, 4, 4],  [0, 4, 4],  [0, 5, 4],  [0, 5, 4],  [0, 6, 2],  [0, 6, 4],  [0, 6, 4],  [0, 7, 4],  [0, 8, 4],  [0, 8, 4],  [0, 10, 4]],
             'f5':[[5, 1, 5],  [5, 3, 5],  [5, 5, 5],  [3, 0, 3],  [3, 1, 5],  [3, 1, 5],  [3, 2, 3],  [3, 2, 5],  [3, 2, 5],  [3, 3, 3],  [3, 3, 5],  [3, 3, 5],  [3, 3, 5],  [3, 4, 3],  [3, 4, 5],  [3, 4, 5],  [3, 4, 5],  [3, 5, 5],  [3, 5, 5],  [3, 5, 5],  [3, 6, 3],  [3, 6, 5],  [3, 6, 5],  [3, 7, 5],  [3, 7, 5],  [3, 8, 5],  [3, 9, 5],  [1, 1, 3],  [1, 1, 5],  [1, 1, 5],  [1, 1, 5],  [1, 2, 3],  [1, 2, 3],  [1, 2, 5],  [1, 2, 5],  [1, 2, 5],  [1, 3, 1],  [1, 3, 3],  [1, 3, 5],  [1, 3, 5],  [1, 3, 5],  [1, 3, 5],  [1, 3, 5],  [1, 4, 3],  [1, 4, 3],  [1, 4, 5],  [1, 4, 5],  [1, 4, 5],  [1, 4, 5],  [1, 5, 3],  [1, 5, 3],  [1, 5, 5],  [1, 5, 5],  [1, 5, 5],  [1, 5, 5],  [1, 5, 5],  [1, 6, 3],  [1, 6, 5],  [1, 6, 5],  [1, 6, 5],  [1, 6, 5],  [1, 7, 3],  [1, 7, 5],  [1, 7, 5],  [1, 7, 5],  [1, 7, 5],  [1, 8, 3],  [1, 8, 5],  [1, 8, 5],  [1, 9, 5],  [1, 9, 5],  [1,10, 5],  [1,11, 5]],
             'f6':[[6, 3, 6],  [4, 0, 4],  [4, 1, 6],  [4, 2, 4],  [4, 2, 6],  [4, 2, 6],  [4, 3, 4],  [4, 3, 6],  [4, 4, 4],  [4, 4, 6],  [4, 4, 6],  [4, 5, 6],  [4, 5, 6],  [4, 6, 4],  [4, 6, 6],  [4, 7, 6],  [4, 8, 6],  [2, 1, 2],  [2, 1, 4],  [2, 1, 4],  [2, 1, 6],  [2, 1, 6],  [2, 1, 6],  [2, 2, 4],  [2, 2, 4],  [2, 2, 6],  [2, 2, 6],  [2, 2, 6],  [2, 3, 2],  [2, 3, 4],  [2, 3, 4],  [2, 3, 4],  [2, 3, 6],  [2, 3, 6],  [2, 3, 6],  [2, 3, 6],  [2, 3, 6],  [2, 4, 4],  [2, 4, 4],  [2, 4, 4],  [2, 4, 6],  [2, 4, 6],  [2, 4, 6],  [2, 4, 6],  [2, 5, 2],  [2, 5, 4],  [2, 5, 4],  [2, 5, 4],  [2, 5, 6],  [2, 5, 6],  [2, 5, 6],  [2, 5, 6],  [2, 5, 6],  [2, 6, 4],  [2, 6, 4],  [2, 6, 6],  [2, 6, 6],  [2, 6, 6],  [2, 6, 6],  [2, 7, 4],  [2, 7, 4],  [2, 7, 6],  [2, 7, 6],  [2, 7, 6],  [2, 7, 6],  [2, 8, 4],  [2, 8, 6],  [2, 8, 6],  [2, 9, 4],  [2, 9, 6],  [2, 9, 6],  [2,10, 6],  [2,11, 6],  [0, 0, 0],  [0, 0, 4],  [0, 0, 6],  [0, 0, 6],  [0, 1, 6],  [0, 2, 2],  [0, 2, 4],  [0, 2, 4],  [0, 2, 4],  [0, 2, 6],  [0, 2, 6],  [0, 3, 4],  [0, 3, 6],  [0, 3, 6],  [0, 3, 6],  [0, 4, 2],  [0, 4, 4],  [0, 4, 4],  [0, 4, 4],  [0, 4, 6],  [0, 4, 6],  [0, 4, 6],  [0, 4, 6],  [0, 5, 4],  [0, 5, 4],  [0, 5, 6],  [0, 5, 6],  [0, 6, 2],  [0, 6, 4],  [0, 6, 4],  [0, 6, 6],  [0, 6, 6],  [0, 6, 6],  [0, 6, 6],  [0, 7, 4],  [0, 7, 6],  [0, 7, 6],  [0, 8, 4],  [0, 8, 4],  [0, 8, 6],  [0, 8, 6],  [0, 9, 6],  [0, 9, 6],  [0,10, 4],  [0,10, 6],  [0,12, 6]],
             'f7':[[7, 0, 7],  [5, 1, 5],  [5, 2, 7],  [5, 3, 5],  [5, 4, 7],  [5, 5, 5],  [5, 6, 7],  [3, 0, 3],  [3, 0, 7],  [3, 1, 5],  [3, 1, 5],  [3, 2, 3],  [3, 2, 5],  [3, 2, 5],  [3, 2, 7],  [3, 2, 7],  [3, 2, 7],  [3, 3, 3],  [3, 3, 5],  [3, 3, 5],  [3, 3, 5],  [3, 3, 7],  [3, 4, 3],  [3, 4, 5],  [3, 4, 5],  [3, 4, 5],  [3, 4, 7],  [3, 4, 7],  [3, 4, 5],  [3, 5, 5],  [3, 5, 5],  [3, 5, 7],  [3, 5, 7],  [3, 5, 7],  [3, 6, 3],  [3, 6, 5],  [3, 6, 5],  [3, 6, 7],  [3, 6, 7],  [3, 7, 5],  [3, 7, 5],  [3, 7, 7],  [3, 8, 5],  [3, 8, 7],  [3, 8, 7],  [3, 9, 5],  [3,10, 7],  [1, 0, 7],  [1, 0, 7],  [1, 1, 3],  [1, 1, 5],  [1, 1, 5],  [1, 1, 5],  [1, 1, 7],  [1, 2, 3],  [1, 2, 3],  [1, 2, 5],  [1, 2, 5],  [1, 2, 5],  [1, 2, 7],  [1, 2, 7],  [1, 3, 1],  [1, 3, 3],  [1, 3, 5],  [1, 3, 5],  [1, 3, 5],  [1, 3, 5],  [1, 3, 5],  [1, 3, 7],  [1, 3, 7],  [1, 3, 7],  [1, 4, 3],  [1, 4, 3],  [1, 4, 5],  [1, 4, 5],  [1, 4, 5],  [1, 4, 5],  [1, 4, 7],  [1, 4, 7],  [1, 4, 7],  [1, 4, 7],  [1, 5, 3],  [1, 5, 3],  [1, 5, 5],  [1, 5, 5],  [1, 5, 5],  [1, 5, 5],  [1, 5, 5],  [1, 5, 7],  [1, 5, 7],  [1, 6, 3],  [1, 6, 5],  [1, 6, 5],  [1, 6, 5],  [1, 6, 5],  [1, 6, 7],  [1, 6, 7],  [1, 6, 7],  [1, 6, 7],  [1, 7, 3],  [1, 7, 5],  [1, 7, 5],  [1, 7, 5],  [1, 7, 5],  [1, 7, 7],  [1, 7, 7],  [1, 8, 3],  [1, 8, 5],  [1, 8, 5],  [1, 8, 7],  [1, 8, 7],  [1, 9, 5],  [1, 9, 5],  [1, 9, 7],  [1, 9, 7],  [1,10, 5],  [1,10, 7],  [1,11, 5],  [1,12, 7]]}

    return legenda[conf]

def terms_labels_symm(conf):
    #In this classification of states 99 and 999 substitute 00 and 000 respectively

    if conf[0]=='d' and int(conf[1:])>5:
        conf = 'd'+str(almost_closed_shells(conf))
    elif conf[0]=='f' and int(conf[1:])>7:
        conf = 'f'+str(almost_closed_shells(conf))
    else:
        pass

    legenda = {'f1':{'2F':[1, 100, 10]},
        'f2':{'3P':[2, 110, 11],
            '3F':[2, 110, 10],
            '3H':[2, 110, 11],
            '1S':[0, 999, 99],
            '1D':[2, 200, 20],
            '1G':[2, 200, 20],
            '1I':[2, 200, 20]},
        'f3':{'4S':[3, 111, 99],
            '4D':[3, 111, 20],
            '4F':[3, 111, 10],
            '4G':[3, 111, 20],
            '4I':[3, 111, 20],
            '2P':[3, 210, 11],
            '2D1':[3, 210, 20],
            '2D2':[3, 210, 21],
            '2F1':[1, 100, 10],
            '2F2':[3, 210, 21],
            '2G1':[3, 210, 20],
            '2G2':[3, 210, 21],
            '2H1':[3, 210, 11],
            '2H2':[3, 210, 21],
            '2I':[3, 210, 20],
            '2K':[3, 210, 21],
            '2L':[3, 210, 21]},
        'f4':{'5S':[4, 111,99],
            '5D':[4, 111, 20],
            '5F':[4, 111, 10],
            '5G':[4, 111, 20],
            '5I':[4, 111, 20],
            '3P1':[2, 110, 11],
            '3P2':[4, 211, 11],
            '3P3':[4, 211, 30],
            '3D1':[4, 211, 20],
            '3D2':[4, 211, 21],
            '3F1':[2, 110, 10],
            '3F2':[4, 211, 10],
            '3F3':[4, 211, 21],
            '3F4':[4, 211, 30],
            '3G1':[4, 211, 20],
            '3G2':[4, 211, 21],
            '3G3':[4, 211, 30],
            '3H1':[2, 110, 11],
            '3H2':[4, 211, 11],
            '3H3':[4, 211, 21],
            '3H4':[4, 211, 30],
            '3I1':[4, 211, 20],
            '3I2':[4, 211, 30],
            '3K1':[4, 211, 21],
            '3K2':[4, 211, 30],
            '3L':[4, 211, 21],
            '3M':[4, 211, 30],
            '1S1':[0,999,99],
            '1S2':[4, 220, 22],
            '1D1':[2, 200, 20],
            '1D2':[4, 220, 20],
            '1D3':[4, 220, 21],
            '1D4':[4, 220, 22],
            '1F':[4, 220, 21],
            '1G1':[2, 200, 20],
            '1G2':[4, 220, 20],
            '1G3':[4, 220, 21],
            '1G4':[4, 220, 22],
            '1H1':[4, 220, 21],
            '1H2':[4, 220, 22],
            '1I1':[2, 200, 20],
            '1I2':[4, 220, 20],
            '1I3':[4, 220, 22],
            '1K':[4, 220, 21],
            '1L1':[4, 220, 21],
            '1L2':[4, 220, 22],
            '1N':[4, 220, 22]},
        'f5':{'6P':[5, 110, 11],
            '6F':[5, 110, 10],
            '6H':[5, 110, 11],
            '4S':[3, 111, 99],
            '4P1':[5, 211, 11],
            '4P2':[5, 211, 30],
            '4D1':[3, 111, 20],
            '4D2':[5, 211, 20],
            '4D3':[5, 211, 21],
            '4F1':[3, 111, 10],
            '4F2':[5, 211, 10],
            '4F3':[5, 211, 21],
            '4F4':[5, 211, 30],
            '4G1':[3, 111, 20],
            '4G2':[5, 211, 20],
            '4G3':[5, 211, 21],
            '4G4':[5, 211, 30],
            '4H1':[5, 211, 11],
            '4H2':[5, 211, 21],
            '4H3':[5, 211, 30],
            '4I1':[3, 111, 20],
            '4I2':[5, 211, 20],
            '4I3':[5, 211, 30],
            '4K1':[5, 211, 21],
            '4K2':[5, 211, 30],
            '4L':[5, 211, 21],
            '4M':[5, 211, 30],
            '2P1':[3, 210, 11],
            '2P2':[5, 221, 11],
            '2P3':[5, 221, 30],
            '2P4':[5, 221, 31],
            '2D1':[3, 210, 20],
            '2D2':[3, 210, 21],
            '2D3':[5, 221, 20],
            '2D4':[5, 221, 21],
            '2D5':[5, 221, 31],
            '2F1':[1, 100, 10],
            '2F2':[3, 210, 21],
            '2F3':[5, 221, 10],
            '2F4':[5, 221, 21],
            '2F5':[5, 221, 30],
            '2F6':[5, 221, 31],
            '2F7':[5, 221, 31],
            '2G1':[3, 210, 20],
            '2G2':[3, 210, 21],
            '2G3':[5, 221, 20],
            '2G4':[5, 221, 21],
            '2G5':[5, 221, 30],
            '2G6':[5, 221, 31],
            '2H1':[3, 210, 11],
            '2H2':[3, 210, 21],
            '2H3':[5, 221, 11],
            '2H4':[5, 221, 21],
            '2H5':[5, 221, 30],
            '2H6':[5, 221, 31],
            '2H7':[5, 221, 31],
            '2I1':[3, 210, 20],
            '2I2':[5, 221, 20],
            '2I3':[5, 221, 30],
            '2I4':[5, 221, 31],
            '2I5':[5, 221, 31],
            '2K1':[3, 210, 21],
            '2K2':[5, 221, 21],
            '2K3':[5, 221, 30],
            '2K4':[5, 221, 31],
            '2K5':[5, 221, 31],
            '2L1':[3, 210, 21],
            '2L2':[5, 221, 21],
            '2L3':[5, 221, 31],
            '2M1':[5, 221, 30],
            '2M2':[5, 221, 31],
            '2N':[5, 221, 31],
            '2O':[5, 221, 31]},
        'f6':{'7F':[6, 100, 10],
            '5S':[4, 111, 99],
            '5P':[6, 210, 11],
            '5D1':[4, 111, 20],
            '5D2':[6, 210, 20],
            '5D3':[6, 210, 21],
            '5F1':[4, 111, 10],
            '5F2':[6, 210, 21],
            '5G1':[4, 111, 20],
            '5G2':[6, 210, 20],
            '5G3':[6, 210, 21],
            '5H1':[6, 210, 11],
            '5H2':[6, 210, 21],
            '5I1':[4, 111, 20],
            '5I2':[6, 210, 20],
            '5K':[6, 210, 21],
            '5L':[6, 210, 21],
            '3P1':[2, 110, 11],
            '3P2':[4, 211, 11],
            '3P3':[4, 211, 30],
            '3P4':[6, 221, 11],
            '3P5':[6, 221, 30],
            '3P6':[6, 221, 31],
            '3D1':[4, 211, 20],
            '3D2':[4, 211, 21],
            '3D3':[6, 221, 20],
            '3D4':[6, 221, 21],
            '3D5':[6, 221, 31],
            '3F1':[2, 110, 10],
            '3F2':[4, 211, 10],
            '3F3':[4, 211, 21],
            '3F4':[4, 211, 30],
            '3F5':[6, 221, 10],
            '3F6':[6, 221, 21],
            '3F7':[6, 221, 30],
            '3F8':[6, 221, 31],
            '3F9':[6, 221, 31],
            '3G1':[4, 211, 20],
            '3G2':[4, 211, 21],
            '3G3':[4, 211, 30],
            '3G4':[6, 221, 20],
            '3G5':[6, 221, 21],
            '3G6':[6, 221, 30],
            '3G7':[6, 221, 31],
            '3H1':[2, 110, 11],
            '3H2':[4, 211, 11],
            '3H3':[4, 211, 21],
            '3H4':[4, 211, 30],
            '3H5':[6, 221, 11],
            '3H6':[6, 221, 21],
            '3H7':[6, 221, 30],
            '3H8':[6, 221, 31],
            '3H9':[6, 221, 31],
            '3I1':[4, 211, 20],
            '3I2':[4, 211, 30],
            '3I3':[6, 221, 20],
            '3I4':[6, 221, 30],
            '3I5':[6, 221, 31],
            '3I6':[6, 221, 31],
            '3K1':[4, 211, 21],
            '3K2':[4, 211, 30],
            '3K3':[6, 221, 21],
            '3K4':[6, 221, 30],
            '3K5':[6, 221, 31],
            '3K6':[6, 221, 31],
            '3L1':[4, 211, 21],
            '3L2':[6, 221, 21],
            '3L3':[6, 221, 31],
            '3M1':[4, 211, 30],
            '3M2':[6, 221, 30],
            '3M3':[6, 221, 31],
            '3N':[6, 221, 31],
            '3O':[6, 221, 31],
            '1S1':[0, 999, 99],
            '1S2':[4, 220, 22],
            '1S3':[6, 222, 99],
            '1S4':[6, 222, 40],
            '1P':[6, 222, 30],
            '1D1':[2, 200, 20],
            '1D2':[4, 220, 20],
            '1D3':[4, 220, 21],
            '1D4':[4, 220, 22],
            '1D5':[6, 222, 20],
            '1D6':[6, 222, 40],
            '1F1':[4, 220, 21],
            '1F2':[6, 222, 10],
            '1F3':[6, 222, 30],
            '1F4':[6, 222, 40],
            '1G1':[2, 200, 20],
            '1G2':[4, 220, 20],
            '1G3':[4, 220, 21],
            '1G4':[4, 220, 22],
            '1G5':[6, 222, 20],
            '1G6':[6, 222, 30],
            '1G7':[6, 222, 40],
            '1G8':[6, 222, 40],
            '1H1':[4, 220, 21],
            '1H2':[4, 220, 22],
            '1H3':[6, 222, 30],
            '1H4':[6, 222, 40],
            '1I1':[2, 200, 20],
            '1I2':[4, 220, 20],
            '1I3':[4, 220, 22],
            '1I4':[6, 222, 20],
            '1I5':[6, 222, 30],
            '1I6':[6, 222, 40],
            '1I7':[6, 222, 40],
            '1K1':[4, 220, 21],
            '1K2':[6, 222, 30],
            '1K3':[6, 222, 40],
            '1L1':[4, 220, 21],
            '1L2':[4, 220, 22],
            '1L3':[6, 222, 40],
            '1L4':[6, 222, 40],
            '1M1':[6, 222, 30],
            '1M2':[6, 222, 40],
            '1N1':[4, 220, 22],
            '1N2':[6, 222, 40],
            '1Q':[6, 222, 40]},
        'f7':{'8S':[7, 999, 99],
            '6P':[5, 110, 11],
            '6D':[7, 200, 20],
            '6F':[5, 110, 10],
            '6G':[7, 200, 20],
            '6H':[5, 110, 11],
            '6I':[7, 200, 20],
            '4S1':[3, 111, 99],
            '4S2':[7, 220, 22],
            '4P1':[5, 211, 11],
            '4P2':[5, 211, 30],
            '4D1':[3, 111, 20],
            '4D2':[5, 211, 20],
            '4D3':[5, 211, 21],
            '4D4':[7, 220, 20],
            '4D5':[7, 220, 21],
            '4D6':[7, 220, 22],
            '4F1':[3, 111, 10],
            '4F2':[5, 211, 10],
            '4F3':[5, 211, 21],
            '4F4':[5, 211, 30],
            '4F5':[7, 220, 21],
            '4G1':[3, 111, 20],
            '4G2':[5, 211, 20],
            '4G3':[5, 211, 21],
            '4G4':[5, 211, 30],
            '4G5':[7, 220, 20],
            '4G6':[7, 220, 21],
            '4G7':[7, 220, 22],
            '4H1':[5, 211, 11],
            '4H2':[5, 211, 21],
            '4H3':[5, 211, 30],
            '4H4':[7, 220, 21],
            '4H5':[7, 220, 22],
            '4I1':[3, 111, 20],
            '4I2':[5, 211, 20],
            '4I3':[5, 211, 30],
            '4I4':[7, 220, 20],
            '4I5':[7, 220, 22],
            '4K1':[5, 211, 21],
            '4K2':[5, 211, 30],
            '4K3':[7, 220, 21],
            '4L1':[5, 211, 21],
            '4L2':[7, 220, 21],
            '4L3':[7, 220, 22],
            '4M':[5, 211, 30],
            '4N':[7, 220, 22],
            '2S1':[7, 222, 99],
            '2S2':[7, 222, 40],
            '2P1':[3, 210, 11],
            '2P2':[5, 221, 11],
            '2P3':[5, 221, 30],
            '2P4':[5, 221, 31],
            '2P5':[7, 222, 30],
            '2D1':[3, 210, 20],
            '2D2':[3, 210, 21],
            '2D3':[5, 221, 20],
            '2D4':[5, 221, 21],
            '2D5':[5, 221, 31],
            '2D6':[7, 222, 20],
            '2D7':[7, 222, 40],
            '2F1':[1, 100, 10],
            '2F2':[3, 210, 21],
            '2F3':[5, 221, 10],
            '2F4':[5, 221, 21],
            '2F5':[5, 221, 30],
            '2F6':[5, 221, 31],
            '2F7':[5, 221, 31],
            '2F8':[7, 222, 10],
            '2F9':[7, 222, 30],
            '2F0':[7, 222, 40],
            '2G1':[3, 210, 20],
            '2G2':[3, 210, 21],
            '2G3':[5, 221, 20],
            '2G4':[5, 221, 21],
            '2G5':[5, 221, 30],
            '2G6':[5, 221, 31],
            '2G7':[7, 222, 20],
            '2G8':[7, 222, 30],
            '2G9':[7, 222, 40],
            '2G0':[7, 222, 40],
            '2H1':[3, 210, 11],
            '2H2':[3, 210, 21],
            '2H3':[5, 221, 11],
            '2H4':[5, 221, 21],
            '2H5':[5, 221, 30],
            '2H6':[5, 221, 31],
            '2H7':[5, 221, 31],
            '2H8':[7, 222, 30],
            '2H9':[7, 222, 40],
            '2I1':[3, 210, 20],
            '2I2':[5, 221, 20],
            '2I3':[5, 221, 30],
            '2I4':[5, 221, 31],
            '2I5':[5, 221, 31],
            '2I6':[7, 222, 20],
            '2I7':[7, 222, 30],
            '2I8':[7, 222, 40],
            '2I9':[7, 222, 40],
            '2K1':[3, 210, 21],
            '2K2':[5, 221, 21],
            '2K3':[5, 221, 30],
            '2K4':[5, 221, 31],
            '2K5':[5, 221, 31],
            '2K6':[7, 222, 30],
            '2K7':[7, 222, 40],
            '2L1':[3, 210, 21],
            '2L2':[5, 221, 21],
            '2L3':[5, 221, 31],
            '2L4':[7, 222, 40],
            '2L5':[7, 222, 40],
            '2M1':[5, 221, 30],
            '2M2':[5, 221, 31],
            '2M3':[7, 222, 30],
            '2M4':[7, 222, 40],
            '2N1':[5, 221, 31],
            '2N2':[7, 222, 40],
            '2O':[5, 221, 31],
            '2Q':[7, 222, 40]}}

    return legenda[conf]

def conv_Aqkrk_bkq(l,m):
    #conversion factor Stevens coefficients to Wybourne formalism
    #The following constants are taken from Table 1 in Journal of Computational Chemistry 2014, 35, 1935–1941

    if isinstance(l, int):
        l = str(l)
    if isinstance(m, int):
        m = str(m)

    legenda = {'2':{'0':2, '1':1/np.sqrt(6), '2':2/np.sqrt(6)},
               '4':{'0':8, '1':2/np.sqrt(5), '2':4/np.sqrt(10), '3':2/np.sqrt(35), '4':8/np.sqrt(70)},
               '6':{'0':16, '1':8/np.sqrt(42), '2':16/np.sqrt(105), '3':8/np.sqrt(105), '4':16/(3*np.sqrt(14)), '5':8/(3*np.sqrt(77)), '6':16/np.sqrt(231)}}
    return legenda[str(l)][str(m)]

def r_expect(k, conf):
    # in atomic units

    if isinstance(k, int):
        k = str(k)

    if k=='0':
        return 1

    if conf[0]=='d':
        # <r^k> from table 7.6 in A. Abragam and B. Bleaney, Electron Paramagnetic Resonance of Transition Ions, Dover, New York, 1986.
        legenda = {'2':{'d2': 2.447,'d3': 2.070,'d4': 1.781,'d5': 1.548,'d6': 1.393,'d7': 1.251,'d8': 1.130,'d9': 1.028},
                '4':{'d2': 13.17,'d3': 9.605,'d4': 7.211,'d5': 5.513,'d6': 4.496,'d7': 3.655,'d8': 3.003,'d9': 2.498}}
    else:
        # <r^k> from S. Edvarsson, M. Klintenberg, J. Alloys Compd. 1998, 275–277, 230
        legenda = {'2':{'f1':1.456, 'f2':1.327, 'f3':1.222, 'f4':1.135, 'f5':1.061, 'f6':0.997, 'f7':0.942, 'f8':0.893, 'f9':0.849, 'f10':0.810, 'f11':0.773, 'f12':0.740, 'f13':0.710},
                '4':{'f1':5.437, 'f2':4.537, 'f3':3.875, 'f4':3.366, 'f5':2.964, 'f6':2.638, 'f7':2.381, 'f8':2.163, 'f9':1.977, 'f10':1.816, 'f11':1.677, 'f12':1.555, 'f13':1.448},
                '6':{'f1':42.26, 'f2':32.65, 'f3':26.12, 'f4':21.46, 'f5':17.99, 'f6':15.34, 'f7':13.36, 'f8':11.75, 'f9':10.44, 'f10':9.345, 'f11':8.431, 'f12':7.659, 'f13':7.003}}
    
    return legenda[k][conf]

def sigma_k(k, conf):
    # Sternheimer shielding parameters from S. Edvardsson, M. Klinterberg, J. Alloys Compd. 1998, 275, 233.

    if isinstance(k, int):
        k = str(k)

    if conf[0] == 'd':
        raise NotImplementedError("Sternheimer shielding parameters for d^n configurations are not implemented.")

    legenda = {'2':{'f1':0.510, 'f2':0.515, 'f3':0.518, 'f4':0.519, 'f5':0.519, 'f6':0.520, 'f7':0.521, 'f8':0.523, 'f9':0.527, 'f10':0.534, 'f11':0.544, 'f12':0.554, 'f13':0.571},
               '4':{'f1':0.0132, 'f2':0.0138, 'f3':0.0130, 'f4':0.0109, 'f5':0.0077, 'f6':0.0033, 'f7':-0.0031, 'f8':-0.0107, 'f9':-0.0199, 'f10':-0.0306, 'f11':-0.0427, 'f12':-0.0567, 'f13':-0.0725},
               '6':{'f1':-0.0294, 'f2':-0.0301, 'f3':-0.0310, 'f4':-0.0314, 'f5':-0.0317, 'f6':-0.0319, 'f7':-0.0318, 'f8':-0.0318, 'f9':-0.0316, 'f10':-0.0313, 'f11':-0.0310, 'f12':-0.0306, 'f13':-0.0300}}
    return legenda[k][conf]

def Stev_coeff(k, conf):
    # Stevens coefficients (alpha=2, beta=4, gamma=6) from K. W. H. Stevens, Proc. Phys. Soc. 1952, 65, 209.
    # or table 20 from A. Abragam and B. Bleaney, Electron Paramagnetic Resonance of Transition Ions, Dover, New York, 1986.
    
    if conf[0] == 'd':
        raise NotImplementedError("Stevens coefficients for d^n configurations are not implemented.")

    legenda = {'2':{'f1':-2/35, 'f2':-52/(11*15**2), 'f3':-7/(33**2), 'f4':14/(11**2*15), 'f5':13/(7*45), 'f6':0, 'f7':0, 'f8':-1/99, 'f9':-2/(9*35), 'f10':-1/(30*15), 'f11':4/(45*35), 'f12':1/99, 'f13':2/63},
               '4':{'f1':2/(7*45), 'f2':-4/(55*33*3), 'f3':-8*17/(11**2*13*297), 'f4':952/(13*3**3*11**3*5), 'f5':26/(33*7*45), 'f6':0, 'f7':0, 'f8':2/(11*1485), 'f9':-8/(11*45*273), 'f10':-1/(11*2730), 'f11':2/(11*15*273), 'f12':8/(3*11*1485), 'f13':-2/(77*15)},
               '6':{'f1':0, 'f2':17*16/(7*11**2*13*5*3**4), 'f3':-17*19*5/(13**2*11**3*3**3*7), 'f4':2584/(11**2*13**2*3*63), 'f5':0, 'f6':0, 'f7':0, 'f8':-1/(13*33*2079), 'f9':4/(11**2*13**2*3**3*7), 'f10':-5/(13*33*9009), 'f11':8/(13**2*11**2*3**3*7), 'f12':-5/(13*33*2079), 'f13':4/(13*33*63)}}
    return legenda[k][conf]

def plm(l,m):
    #spherical harmonics prefactor

    legenda = {'2':{'0':(1/4)*np.sqrt(5/np.pi), '1':(1/2)*np.sqrt(15/np.pi), '2':(1/4)*np.sqrt(15/np.pi)},
               '4':{'0':(3/16)*np.sqrt(1/np.pi), '1':(3/4)*np.sqrt(5/(2*np.pi)), '2':(3/8)*np.sqrt(5/np.pi), '3':(3/8)*np.sqrt(70/np.pi), '4':(3/16)*np.sqrt(35/np.pi)},
               '6':{'0':(1/32)*np.sqrt(13/np.pi), '1':(1/8)*np.sqrt(273/(4*np.pi)), '2':(1/64)*np.sqrt(2730/np.pi), '3':(1/32)*np.sqrt(2730/np.pi), '4':(21/32)*np.sqrt(13/(np.pi*7)), '5':np.sqrt(9009/(512*np.pi)), '6':(231/64)*np.sqrt(26/(np.pi*231))}}
    return legenda[str(l)][str(m)]

def A_table(nel, MJ):  #NOT USED
    #multipole moments of trivalen rare earth ions for J=MJ
    #Table 1 p 292 of Sievers "Asphericity of 4f-Shells in their Hund's rule ground states" (1981)

    legend = {1: {'5/2':[-0.2857, 0.0476, 0.000]},
            2: {'4':[-0.2941, -0.0771, 0.0192]},
            3: {'9/2':[-0.1157, -0.0550, -0.0359]},
            4: {'4':[0.1080, 0.0428, 0.0191]},
            5: {'5/2':[0.2063, 0.0188, 0.0000]},
            7: {'7/2':[0.000, 0.000, 0.000]},
            8: {'6':[-0.3333, 0.0909, -0.0117]},
            9: {'15/2':[-0.3333, -0.1212, 0.0583]},
            10:{'8':[-0.1333, -0.0909, -0.1166]},
            11:{'15/2':[0.1333, 0.0909, 0.1166]},
            12:{'6':[0.3333,0.1212,-0.0583]},
            13:{'7/2':[0.3333,-0.0909,0.0117]}}

    return legend[nel][MJ]

def state_legend(L_str, inv=False):
    legenda = {'S':0,
               'P':1,
               'D':2,
               'F':3,
               'G':4,
               'H':5,
               'I':6,
               'K':7,
               'L':8,
               'M':9,
               'N':10,
               'O':11,
               'Q':12,
               'R':13,
               'T':14,
               'U':15,
               'V':16}
    if inv==False:
        return legenda[L_str]
    else:
        inv_map = {str(v): k for k, v in legenda.items()}
        return inv_map[L_str]

def almost_closed_shells(name):
    legenda = {'d6':4,
               'd7':3,
               'd8':2,
               'd9':1,
               'f8':6,
               'f9':5,
               'f10':4,
               'f11':3,
               'f12':2,
               'f13':1}
    return legenda[name]

def ground_term_legend(conf):

    legenda = {'d1':'2D',
               'd2':'3F',
               'd3':'4F',
               'd4':'5D',
               'd5':'6S',
               'f1':'2F (5/2)',
               'f2':'3H (4)',
               'f3':'4I (9/2)',
               'f4':'5I (4)',
               'f5':'6H (5/2)',
               'f6':'7F (0)',
               'f7':'8S (7/2)',
               'f8':'7F (6)',
               'f9':'6H (15/2)',
               'f10':'5I (8)',
               'f11':'4I (15/2)',
               'f12':'3H (6)',
               'f13':'2F (7/2)'}
    return legenda[conf]

def free_ion_param_f(conf):
    #Table 5 p 168 from C. Goerller-Walrand, K. Binnemans, Handbook of Physics & Chemistry of Rare Earths, Vol 23, Ch 155, (1996)

    if conf=='f13' or conf=='f1':
        print('Warning: '+conf+' is not included in free_ion_param_f(), redirected toward free_ion_param_f_HF()')
        return free_ion_param_f_HF(conf)

    dict = {'f2':{'F2': 68323, 'F4': 49979, 'F6': 32589, 'zeta': 747},
            'f3':{'F2': 72295, 'F4': 52281, 'F6': 35374, 'zeta': 879},
            'f4':{'F2': 75842, 'F4': 54319, 'F6': 38945, 'zeta': 1023},
            'f5':{'F2': 79012, 'F4': 56979, 'F6': 40078, 'zeta': 1170},
            'f6':{'F2': 82786, 'F4': 59401, 'F6': 42644, 'zeta': 1332},
            'f7':{'F2': 85300, 'F4': 60517, 'F6': 44731, 'zeta': 1504},
            'f8':{'F2': 89540, 'F4': 63485, 'F6': 44998, 'zeta': 1705},
            'f9':{'F2': 92373, 'F4': 65281, 'F6': 47642, 'zeta': 1915},
            'f10':{'F2': 95772, 'F4': 67512, 'F6': 48582, 'zeta': 2142},
            'f11':{'F2': 97909, 'F4': 70349, 'F6': 48861, 'zeta': 2358},
            'f12':{'F2': 101381, 'F4': 70230, 'F6': 51827, 'zeta': 2644}}
    return dict[conf]

def free_ion_param_f_HF(conf):
    # from Ma, C. G., Brik, M. G., Li, Q. X., & Tian, Y. (2014). Systematic analysis of spectroscopic characteristics of the lanthanide and actinide ions with the 4fN and 5fN (N= 1… 14) electronic configurations in a free state. Journal of alloys and compounds, 599, 93-101.
    dict = {'f1':{'F2': 0, 'F4': 0, 'F6': 0, 'zeta': 689},
            'f2':{'F2': 96681, 'F4': 60533, 'F6': 43509, 'zeta': 808},
            'f3':{'F2': 100645, 'F4': 63030, 'F6': 45309, 'zeta': 937},
            'f4':{'F2': 104389, 'F4': 65383, 'F6': 47003, 'zeta': 1075},
            'f5':{'F2': 107971, 'F4': 67630, 'F6': 48619, 'zeta': 1225},
            'f6':{'F2': 111416, 'F4': 69786, 'F6': 50169, 'zeta': 1387},
            'f7':{'F2': 114742, 'F4': 71865, 'F6': 51662, 'zeta': 1561},
            'f8':{'F2': 117981, 'F4': 73886, 'F6': 53113, 'zeta': 1749},
            'f9':{'F2': 121132, 'F4': 75850, 'F6': 54523, 'zeta': 1950},
            'f10':{'F2': 124214, 'F4': 77768, 'F6': 55899, 'zeta': 2165},
            'f11':{'F2': 127240, 'F4': 79650, 'F6': 57248, 'zeta': 2396},
            'f12':{'F2': 130201, 'F4': 81489, 'F6': 58566, 'zeta': 2643},
            'f13':{'F2': 133119, 'F4': 83300, 'F6': 59864, 'zeta': 2906}}
    return dict[conf]

def free_ion_param_AB(conf):
    # from Electron paramagnetic resonance of transition metal ions from Abragam e Bleany 

    def from_BC_to_Fk(B,C,A=0):
        ABC = np.array([A,B,C])
        conv = np.array([[1,0,7/5],[0,49,49/7],[0,0,441/35]])
        return np.dot(conv,ABC)

    if conf[0]=='d':
        # table 7.3
        dict = {'d1':{'F2': from_BC_to_Fk(0,0)[1], 'F4': from_BC_to_Fk(0,0)[2], 'zeta':79.0},
                'd2':{'F2': from_BC_to_Fk(694,2910)[1], 'F4': from_BC_to_Fk(694,2910)[2], 'zeta':120.0},
                'd3':{'F2': from_BC_to_Fk(755,3257)[1], 'F4': from_BC_to_Fk(755,3257)[2], 'zeta':168.0},
                'd4':{'F2': from_BC_to_Fk(810,3565)[1], 'F4': from_BC_to_Fk(810,3565)[2], 'zeta':236.0},
                'd5':{'F2': from_BC_to_Fk(860,3850)[1], 'F4': from_BC_to_Fk(860,3850)[2], 'zeta':335.0},
                'd6':{'F2': from_BC_to_Fk(917,4040)[1], 'F4': from_BC_to_Fk(917,4040)[2], 'zeta':404.0},
                'd7':{'F2': from_BC_to_Fk(971,4497)[1], 'F4': from_BC_to_Fk(971,4497)[2], 'zeta':528.0},
                'd8':{'F2': from_BC_to_Fk(1030,4850)[1], 'F4': from_BC_to_Fk(1030,4850)[2], 'zeta':644.0},
                'd9':{'F2': from_BC_to_Fk(0,0)[1], 'F4': from_BC_to_Fk(0,0)[2], 'zeta':829.0}}

    elif conf[0]=='f':
        warnings.warn("Slater-Condon F^k from Abragam e Bleany are not available for f^n configurations.\nPlease use free_ion_param_f_HF() or free_ion_param_f() if .", UserWarning)
        # table 5.3
        dict = {'f1':{'zeta': 740},
            'f2':{'zeta': 878},
            'f3':{'zeta': 1024},
            'f5':{'zeta': 1342},
            'f7':{'zeta': 1717},
            'f8':{'zeta': 1915},
            'f9':{'zeta': 2182},
            'f10':{'zeta': 2360},
            'f11':{'zeta': 2610},
            'f12':{'zeta': 2866},
            'f13':{'zeta': 3161}}

    return dict[conf]

def COLORS_list():
    colors = [
    'tab:blue',
    'tab:red',
    'tab:green',
    'tab:orange',
    'tab:pink',
    'tab:purple',
    'tab:gray',
    'tab:cyan',
    'tab:brown',
    'tab:olive',
    'salmon',
    'indigo',
    'm',
    'c',
    'g',
    'r',
    'b',
    'k',
    ]

    for w in range(10):
        colors += colors
    COLORS = tuple(colors)
    return COLORS

def color_atoms():

    elem_cpk = {  # color codes for elements
            # Basics
            'H' : 'lightgray',
            'C' : 'k',
            'N' : 'b',
            'O' : 'r',
            # Halogens
            'F' : 'tab:green',
            'Cl': 'g',
            'Br': 'maroon',
            'I' : 'darkviolet',
            # Noble gases
            'He': 'c',
            'Ne': 'c',
            'Ar': 'c',
            'Kr': 'c',
            'Xe': 'c',
            # Common nonmetals
            'P' : 'orange',
            'S' : 'y',
            'B' : 'tan',
            # Metals
            #   Alkali
            'Li': 'violet',
            'Na': 'violet',
            'K' : 'violet',
            'Rb': 'violet',
            'Cs': 'violet',
            #   Alkali-earth
            'Be': 'darkgreen',
            'Mg': 'darkgreen',
            'Ca': 'darkgreen',
            'Sr': 'darkgreen',
            'Ba': 'darkgreen',
            #   Transition, I series
            'Sc': 'steelblue',
            'Ti': 'steelblue',
            'V' : 'steelblue',
            'Cr': 'steelblue',
            'Mn': 'steelblue',
            'Fe': 'steelblue',
            'Co': 'steelblue',
            'Ni': 'steelblue',
            'Cu': 'steelblue',
            'Zn': 'steelblue',
            #   Transition, II series
            'Y' : 'deepskyblue',
            'Zr': 'deepskyblue',
            'Nb': 'deepskyblue',
            'Mo': 'deepskyblue',
            'Tc': 'deepskyblue',
            'Ru': 'deepskyblue',
            'Rh': 'deepskyblue',
            'Pd': 'deepskyblue',
            'Ag': 'deepskyblue',
            'Cd': 'deepskyblue',
            #   Transition, III series
            'La': 'cadetblue',
            'Hf': 'cadetblue',
            'Ta': 'cadetblue',
            'W' : 'cadetblue',
            'Re': 'cadetblue',
            'Os': 'cadetblue',
            'Ir': 'cadetblue',
            'Pt': 'cadetblue',
            'Au': 'cadetblue',
            'Hg': 'cadetblue',
            #   Lanthanides
            'Ce': 'teal',
            'Pr': 'teal',
            'Nd': 'teal',
            'Pm': 'teal',
            'Sm': 'teal',
            'Eu': 'teal',
            'Gd': 'teal',
            'Tb': 'teal',
            'Dy': 'teal',
            'Ho': 'teal',
            'Er': 'teal',
            'Tm': 'teal',
            'Yb': 'teal',
            'Lu': 'teal',
            # Default color for all the others
            '_' : 'tab:pink',
            }
    
    return elem_cpk

def read_structure(filexyz):
    #first 2 lines are not accounted for
    label = []
    coord = []
    file = open(filexyz, 'r').readlines()
    for i,line in enumerate(file):
        splitline = line.split('\t')
        if i>1:
            label.append(splitline[0])
            row = [float(splitline[j]) for j in range(1, len(splitline))]
            coord.append(row)
    label = np.array(label)
    coord = np.array(coord)
    return label, coord

def princ_comp(w, v=np.zeros((3,3))):

    from itertools import permutations

    permutazioni = list(permutations([0,1,2]))
    vst = np.zeros_like(v)
    for perm in permutazioni :
        sax = w[perm[0]]-(w[perm[1]]+w[perm[2]])/2.
        srh = w[perm[1]]-w[perm[2]]
        if np.abs(sax)>=np.abs(srh*3./2.) :
            zz = w[perm[0]]
            vst[:,2] = v[:,perm[0]]
            if np.sign(sax) == np.sign(srh) :
                xx = w[perm[2]]
                vst[:,0] = v[:,perm[2]]
                yy = w[perm[1]]
                vst[:,1] = v[:,perm[1]]
            else:
                xx = w[perm[1]]
                vst[:,0] = v[:,perm[1]]
                yy = w[perm[2]]
                vst[:,1] = v[:,perm[2]]
#        print('ax', zz-(xx+yy)/2.)
#        print('rh', xx-yy)
    wst = np.array([xx, yy, zz])

    return wst, vst

def princ_comp_sort(w, v=np.zeros((3,3))):

    indices = np.argsort(np.abs(w))
    wst = w[indices]
    vst = v[:,indices]
    return wst, vst

def def_fmtsusc(filesusc):
    fmtsusc = 'MOLCAS'
    for line in filesusc :

        if 'VAN VLECK SUSCEPTIBILITY' in line :
            fmtsusc = 'MOLCAS'
            break
        if 'TEMPERATURE DEPENDENT' in line :
            fmtsusc = 'ORCA'
            break
    return fmtsusc

def from_orca(filesusc, name):

    from itertools import islice

    if name=='D':
        count = 0
        for ii, line in enumerate(filesusc):
            #print(line)
            if 'Raw matrix (cm-1)' in line:
                count+=1
                if count%4==0:
                    Dmatstring=''.join(islice(filesusc,ii+1,ii+4,None))
                    evalstring=''.join(islice(filesusc,ii+6,ii+7,None))
                    evecstring=''.join(islice(filesusc,ii+12,ii+15,None))
                    break

        Dmatlist = [float(f) for f in Dmatstring.split()]
        evallist = [float(f) for f in evalstring.split()]
        eveclist = [float(f) for f in evecstring.split()]
        matrix = np.reshape(np.array(Dmatlist),(3,3))
        eigval = np.reshape(np.array(evallist),(3,))
        eigvec = np.reshape(np.array(eveclist),(3,3))

    elif name=='g':
        count = 0
        for ii, line in enumerate(filesusc):
            if 'ELECTRONIC G-MATRIX FROM EFFECTIVE HAMILTONIAN' in line:
                count+=1
                if count%2==0:
                    gmatstring=''.join(islice(filesusc,ii+5,ii+8,None))
                    evalstring=''.join(islice(filesusc,ii+10,ii+11,None))
                    evecstring=''.join(islice(filesusc,ii+15,ii+18,None))

        gmatlist = [float(f) for f in gmatstring.split()]
        evallist = []
        for i,f in enumerate(evalstring.split()):
            if i<3:
                try:
                    evallist.append(float(f))
                except:
                    pass
        eveclist = []
        for f in evecstring.split():
            try:
                eveclist.append(float(f))
            except:
                pass
        matrix = np.reshape(np.array(gmatlist),(3,3))
        eigval = np.reshape(np.array(evallist),(3,))
        eigvec = np.reshape(np.array(eveclist),(3,3))
    else:
        exit()

    return matrix, eigval, eigvec

def find_chi(fmtsusc, filesusc, temp):

    factor = np.pi*4/(1e6*scipy.constants.Avogadro*temp)
    cgs = True
    if fmtsusc == 'MOLCAS' :
        for line in filesusc :
            if 'cm3*K/mol' in line :
                factor = np.pi*4/(1e6*scipy.constants.Avogadro*temp)
                cgs = True
            try :
                if float(line.split()[0]) == temp :
                    chistring = line.split()
#                    print (chistring)
                    break
            except :
                pass
        if cgs :
            chicgs = np.array([[float(chiel) for chiel in chistring[1:4]],[float(chiel) for chiel in chistring[4:7]],[float(chiel) for chiel in chistring[7:10]]])
            chi = chicgs*factor

        else :
            chi = np.array([[float(chiel) for chiel in chistring[1:4]],[float(chiel) for chiel in chistring[4:7]],[float(chiel) for chiel in chistring[7:10]]])
    elif fmtsusc == 'ORCA' :
        factor = np.pi*4/(1e6*scipy.constants.Avogadro*temp)
        counter_ten = 0
        for idx,line in enumerate(filesusc):
            if 'TEMPERATURE/K:' in line:
                if float(line.split()[1])==int(temp):
                    counter_ten+=1
                    #if counter_ten%2==0:
                    chi = ''.join(islice(filesusc,idx+2,idx+5,None))
                    chixx = float(chi.split()[0])
                    chixy = float(chi.split()[1])
                    chixz = float(chi.split()[2])
                    chiyy = float(chi.split()[4])
                    chiyz = float(chi.split()[5])
                    chizz = float(chi.split()[8])
                    #break
        chicgs = np.array([[chixx,chixy,chixz],[chixy,chiyy,chiyz],[chixz,chiyz,chizz]])
#            print('chi_ORCA cgs', chicgs)
        chi = chicgs*factor

    return chi

def angle_between_vectors(v1, v2):

    v1 = np.array(v1)
    v2 = np.array(v2)

    dot_product = np.dot(v1, v2)

    norm_v1 = np.linalg.norm(v1)
    norm_v2 = np.linalg.norm(v2)

    cos_angle = dot_product / (norm_v1 * norm_v2)

    angle_rad = np.arccos(cos_angle)

    angle_deg = np.degrees(angle_rad)
    
    return angle_rad, angle_deg
